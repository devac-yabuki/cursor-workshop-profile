---
alwaysApply: false
description: HTMLセマンティクスとWCAGチェックリスト（初心者向け）
globs: *.html,*.css,*.js,*.ts,*.jsx,*.tsx,*.md
---

# HTMLセマンティクスとWCAGチェックリスト（初心者向け）

このルールは、「正しいHTMLの使い方」でアクセシビリティ品質を底上げするための実践チェックリストです。難しいARIAを増やすのではなく、まずはネイティブ要素を適切に使うことを重視します。

## 基本原則
1. **ネイティブ優先**: できる限り目的に合うHTML要素を使う（例: ボタンは `<button>`、リンクは `<a>`）
2. **意味づけの伝達**: セマンティクス（見出し・ランドマーク・リストなど）を正しくマークアップ
3. **キーボード操作**: すべての操作をキーボードだけで実行できる
4. **フォーカス可視**: フォーカスリングは消さない/見やすくする
5. **動きへの配慮**: `prefers-reduced-motion` を尊重し、点滅や激しいアニメは避ける

## ドキュメントの土台
```html
<!doctype html>
<html lang="ja">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>ページの固有タイトル</title>
  </head>
  <body>
    <header>…サイト/ページのヘッダー…</header>
    <nav>…主要ナビゲーション…</nav>
    <main>
      <h1>ページの主見出し</h1>
      <section aria-labelledby="s1-h">
        <h2 id="s1-h">セクション見出し</h2>
        <p>本文テキスト。</p>
      </section>
    </main>
    <footer>…フッター…</footer>
  </body>
  </html>
```

## セマンティクスの要点
- **見出し構造**: `h1`→`h2`→`h3`…の順序を守る（スキップしない）
- **ランドマーク**: `header`/`nav`/`main`/`aside`/`footer` を適切に。`main` は基本1ページ1個
- **リスト/表**: 箇条書きは `ul/ol/li`、データ表は `table` + `th` でヘッダを明示
- **フォーム**: `label for` と `id` を結び、グループは `fieldset` + `legend`
- **画像代替**: 情報を伝える画像は適切な `alt`。装飾は空alt（`alt=""`）
- **リンクとボタン**: 遷移は `<a href>`, 動作は `<button>`。見た目だけで判別させない

## キーボードとフォーカス
- すべての操作をキーボードで実行できること（Tab/Enter/Space/矢印など）
- フォーカスインジケータは視認できること（`outline` を消さない、`:focus-visible` を活用）
- キーボードトラップ（入ると抜けられない状態）を作らない

```css
:focus-visible {
  outline: 2px solid #0a7cff;
  outline-offset: 2px;
}
```

## 色・動き・メディア
- **コントラスト**: 文字と背景のコントラストは原則 4.5:1 以上を目安に（大きな文字は 3:1 以上）
- **動きの抑制**: `@media (prefers-reduced-motion: reduce)` を尊重
- **自動再生音声**: 自動再生は避ける/直ちに停止できる手段を提供

```css
@media (prefers-reduced-motion: reduce) {
  * { animation: none !important; transition: none !important; }
}
```

## よく使うネイティブUI（推奨）
- **アコーディオン**: `<details>` と `<summary>`（別ルール参照）
- **モーダル**: `<dialog>`（別ルール参照）
- **ボタン**: `<button>`（`type` を適切に）
- **フォーム入力**: `input type="email"/"tel"/"date"` など適切な型

## ARIAの使い方（最小主義）
1. まずネイティブ要素で達成できないか検討する
2. どうしても必要な場合のみARIAを追加
3. 「ロール/ラベル/状態」は一貫して維持し、DOMの変化に追従させる

NG例:
- ネイティブで成立しているのに `role="button"` を追加
- 状態が二重（`open` と `aria-expanded` を同時管理 など）
- 視覚だけで意味を伝える（色だけで必須/エラーを示す など）

## 送付前チェックリスト（抜粋）
- [ ] `<html lang>` が適切
- [ ] タイトルが固有である
- [ ] 見出し構造が論理的（階層が飛んでいない）
- [ ] 主要ランドマークが適切（`main` は1つ）
- [ ] すべての操作をキーボードで実行できる
- [ ] フォーカスリングが見える
- [ ] 画像の `alt` が適切（装飾は空alt）
- [ ] フォームの `label`/`fieldset`/`legend` が適切
- [ ] コントラストが十分
- [ ] 動きの抑制に対応（必要に応じて）
- [ ] 必要以上のARIAを追加していない

## 参考実装（フォームの最小例）
```html
<form>
  <fieldset>
    <legend>連絡先</legend>
    <div>
      <label for="name">お名前</label>
      <input id="name" name="name" type="text" required>
    </div>
    <div>
      <label for="email">メールアドレス</label>
      <input id="email" name="email" type="email" required>
    </div>
    <button type="submit">送信</button>
  </fieldset>
  <p role="status" aria-live="polite" hidden id="form-status"></p>
</form>

<script>
  const status = document.getElementById('form-status');
  document.querySelector('form').addEventListener('submit', (e) => {
    e.preventDefault();
    status.hidden = false;
    status.textContent = '送信しました。ありがとうございました。';
  });
}</script>
```

